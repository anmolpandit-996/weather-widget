let apiKey="8991320cab517f1c599937a2bb062e87";function renderCurrentWeatherHTML(e){addCurrentWeatherHTML(document.querySelector(".current-conditions"),e.weather[0].icon,Math.ceil(e.main.temp),e.weather[0].description)}function addCurrentWeatherHTML(e,t,a,r){e.innerHTML="",e.innerHTML+=`<h2>Current Conditions</h2>
        <img src="https://openweathermap.org/img/wn/${t}@2x.png" />
        <div class="current">
          <div class="temp">${a}℃</div>
          <div class="condition">${r}</div>
        </div> `}function renderWeatherForecastHTML(e){var t,a,r,n,o=document.querySelector(".forecast");for(i=0;i<=40;i++)i%8==0&&(t=new Date(e[i].dt_txt).toLocaleDateString("default",{weekday:"long"}),a=e[i].weather[0].icon,r=Math.ceil(e[i].main.temp_max),n=Math.floor(e[i].main.temp_min),addWeatherForcastHTML(o,t,a,e[i].weather[0].description,r,n))}function addWeatherForcastHTML(e,t,a,r,i,n){e.innerHTML+=`
  <div class="day">
  <h3>${t}</h3>
  <img src="https://openweathermap.org/img/wn/${a}@2x.png" />
  <div class="description">${r}</div>
  <div class="temp">
    <span class="high">${i}℃</span>/<span class="low">${n}℃</span>
  </div>
  </div> 
  `}function getLocation(){navigator.geolocation.getCurrentPosition(e=>{getCurrentWeather(e.coords.latitude,e.coords.longitude),getWeatherForecast(e.coords.latitude,e.coords.longitude)})}getLocation();const getWeatherForecast=async(e,t)=>{t=`https://api.openweathermap.org/data/2.5/forecast?lat=${e}&lon=${t}&units=metric&appid=${apiKey}`;const a=await fetch(t);renderWeatherForecastHTML((await a.json()).list)},getCurrentWeather=async(e,t)=>{t=`https://api.openweathermap.org/data/2.5/weather?lat=${e}&lon=${t}&units=metric&appid=${apiKey}`;const a=await fetch(t);renderCurrentWeatherHTML(await a.json())};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJhcGlLZXkiLCJyZW5kZXJDdXJyZW50V2VhdGhlckhUTUwiLCJ3ZWF0aGVyT2JqIiwiYWRkQ3VycmVudFdlYXRoZXJIVE1MIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2VhdGhlciIsImljb24iLCJNYXRoIiwiY2VpbCIsInRlbXAiLCJkZXNjcmlwdGlvbiIsImN1cnJlbnRDb25kaXRpb25FbGUiLCJ3ZWF0aGVySWNvbiIsIndlYXRoZXJEaXNjcmlwdGlvbiIsImlubmVySFRNTCIsInJlbmRlcldlYXRoZXJGb3JlY2FzdEhUTUwiLCJ3ZWF0aGVyQXJyYXkiLCJkYXkiLCJ0ZW1wTWF4IiwidGVtcE1pbiIsImZvcmVjYXN0V2VhdGhlckVsZSIsImkiLCJEYXRlIiwiZHRfdHh0IiwidG9Mb2NhbGVEYXRlU3RyaW5nIiwid2Vla2RheSIsInRlbXBfbWF4IiwiZmxvb3IiLCJ0ZW1wX21pbiIsImFkZFdlYXRoZXJGb3JjYXN0SFRNTCIsImdldExvY2F0aW9uIiwibmF2aWdhdG9yIiwiZ2VvbG9jYXRpb24iLCJnZXRDdXJyZW50UG9zaXRpb24iLCJnZXRDdXJyZW50V2VhdGhlciIsInBvc2l0aW9uIiwiY29vcmRzIiwibGF0aXR1ZGUiLCJsb25naXR1ZGUiLCJnZXRXZWF0aGVyRm9yZWNhc3QiLCJhc3luYyIsInVybCIsInJlc3BvbnNlIiwiZmV0Y2giLCJqc29uIiwibGlzdCJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQUEsT0FBQSxtQ0FFQSxTQUFBQyx5QkFBQUMsR0FPQUMsc0JBTkFDLFNBQUFDLGNBQUEsdUJBRUFILEVBQUFJLFFBQUEsR0FBQUMsS0FDQUMsS0FBQUMsS0FBQVAsRUFBQSxLQUFBUSxNQUNBUixFQUFBSSxRQUFBLEdBQUFLLGFBVUEsU0FBQVIsc0JBQ0FTLEVBQ0FDLEVBQ0FILEVBQ0FJLEdBRUFGLEVBQUFHLFVBQUEsR0FDQUgsRUFBQUc7c0RBQ0FGOzs4QkFFQUg7bUNBQ0FJO2lCQUlBLFNBQUFFLDBCQUFBQyxHQUNBLElBSUFDLEVBSUFMLEVBQ0FNLEVBQ0FDLEVBVkFDLEVBQUFqQixTQUFBQyxjQUFBLGFBRUEsSUFBQWlCLEVBQUEsRUFBQUEsR0FBQSxHQUFBQSxJQUNBQSxFQUFBLEdBQUEsSUFDQUosRUFBQSxJQUFBSyxLQUFBTixFQUFBSyxHQUFBRSxRQUFBQyxtQkFBQSxVQUFBLENBQ0FDLFFBQUEsU0FHQWIsRUFBQUksRUFBQUssR0FBQWhCLFFBQUEsR0FBQUMsS0FDQVksRUFBQVgsS0FBQUMsS0FBQVEsRUFBQUssR0FBQSxLQUFBSyxVQUNBUCxFQUFBWixLQUFBb0IsTUFBQVgsRUFBQUssR0FBQSxLQUFBTyxVQUdBQyxzQkFDQVQsRUFDQUgsRUFDQUwsRUFMQUksRUFBQUssR0FBQWhCLFFBQUEsR0FBQUssWUFPQVEsRUFDQUMsSUFNQSxTQUFBVSxzQkFDQVQsRUFDQUgsRUFDQUwsRUFDQUMsRUFDQUssRUFDQUMsR0FFQUMsRUFBQU47O1FBRUFHO2dEQUNBTDs2QkFDQUM7O3lCQUVBSywrQkFBQUM7OztJQU1BLFNBQUFXLGNBQ0FDLFVBQUFDLFlBQUFDLG1CQUFBLElBQ0FDLGtCQUFBQyxFQUFBQyxPQUFBQyxTQUFBRixFQUFBQyxPQUFBRSxXQUNBQyxtQkFBQUosRUFBQUMsT0FBQUMsU0FBQUYsRUFBQUMsT0FBQUUsYUFJQVIsY0FFQSxNQUFBUyxtQkFBQUMsTUFBQUgsRUFBQUMsS0FDQUcsMERBQUFKLFNBQUFDLHdCQUFBdkMsU0FFQSxNQUFBMkMsUUFBQUMsTUFBQUYsR0FHQTFCLGlDQUZBMkIsRUFBQUUsUUFFQUMsT0FHQVgsa0JBQUFNLE1BQUFILEVBQUFDLEtBQ0FHLHlEQUFBSixTQUFBQyx3QkFBQXZDLFNBRUEsTUFBQTJDLFFBQUFDLE1BQUFGLEdBR0F6QywrQkFGQTBDLEVBQUFFIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImxldCBhcGlLZXkgPSBcIjg5OTEzMjBjYWI1MTdmMWM1OTk5MzdhMmJiMDYyZTg3XCI7XG5cbmZ1bmN0aW9uIHJlbmRlckN1cnJlbnRXZWF0aGVySFRNTCh3ZWF0aGVyT2JqKSB7XG4gIGNvbnN0IGN1cnJlbnRDb25kaXRpb25FbGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmN1cnJlbnQtY29uZGl0aW9uc1wiKTtcblxuICBjb25zdCB3ZWF0aGVySWNvbiA9IHdlYXRoZXJPYmoud2VhdGhlclswXS5pY29uO1xuICBjb25zdCB0ZW1wID0gTWF0aC5jZWlsKHdlYXRoZXJPYmpbXCJtYWluXCJdLnRlbXApO1xuICBjb25zdCB3ZWF0aGVyRGlzY3JpcHRpb24gPSB3ZWF0aGVyT2JqLndlYXRoZXJbMF0uZGVzY3JpcHRpb247XG5cbiAgYWRkQ3VycmVudFdlYXRoZXJIVE1MKFxuICAgIGN1cnJlbnRDb25kaXRpb25FbGUsXG4gICAgd2VhdGhlckljb24sXG4gICAgdGVtcCxcbiAgICB3ZWF0aGVyRGlzY3JpcHRpb25cbiAgKTtcbn1cblxuZnVuY3Rpb24gYWRkQ3VycmVudFdlYXRoZXJIVE1MKFxuICBjdXJyZW50Q29uZGl0aW9uRWxlLFxuICB3ZWF0aGVySWNvbixcbiAgdGVtcCxcbiAgd2VhdGhlckRpc2NyaXB0aW9uXG4pIHtcbiAgY3VycmVudENvbmRpdGlvbkVsZS5pbm5lckhUTUwgPSBcIlwiO1xuICBjdXJyZW50Q29uZGl0aW9uRWxlLmlubmVySFRNTCArPSBgPGgyPkN1cnJlbnQgQ29uZGl0aW9uczwvaDI+XG4gICAgICAgIDxpbWcgc3JjPVwiaHR0cHM6Ly9vcGVud2VhdGhlcm1hcC5vcmcvaW1nL3duLyR7d2VhdGhlckljb259QDJ4LnBuZ1wiIC8+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjdXJyZW50XCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInRlbXBcIj4ke3RlbXB94oSDPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImNvbmRpdGlvblwiPiR7d2VhdGhlckRpc2NyaXB0aW9ufTwvZGl2PlxuICAgICAgICA8L2Rpdj4gYDtcbn1cblxuZnVuY3Rpb24gcmVuZGVyV2VhdGhlckZvcmVjYXN0SFRNTCh3ZWF0aGVyQXJyYXkpIHtcbiAgY29uc3QgZm9yZWNhc3RXZWF0aGVyRWxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5mb3JlY2FzdFwiKTtcblxuICBmb3IgKGkgPSAwOyBpIDw9IDQwOyBpKyspIHtcbiAgICBpZiAoaSAlIDggPT09IDApIHtcbiAgICAgIGxldCBkYXkgPSBuZXcgRGF0ZSh3ZWF0aGVyQXJyYXlbaV0uZHRfdHh0KS50b0xvY2FsZURhdGVTdHJpbmcoXCJkZWZhdWx0XCIsIHtcbiAgICAgICAgd2Vla2RheTogXCJsb25nXCIsXG4gICAgICB9KTtcblxuICAgICAgY29uc3Qgd2VhdGhlckljb24gPSB3ZWF0aGVyQXJyYXlbaV0ud2VhdGhlclswXS5pY29uO1xuICAgICAgY29uc3QgdGVtcE1heCA9IE1hdGguY2VpbCh3ZWF0aGVyQXJyYXlbaV1bXCJtYWluXCJdLnRlbXBfbWF4KTtcbiAgICAgIGNvbnN0IHRlbXBNaW4gPSBNYXRoLmZsb29yKHdlYXRoZXJBcnJheVtpXVtcIm1haW5cIl0udGVtcF9taW4pO1xuICAgICAgY29uc3Qgd2VhdGhlckRpc2NyaXB0aW9uID0gd2VhdGhlckFycmF5W2ldLndlYXRoZXJbMF0uZGVzY3JpcHRpb247XG5cbiAgICAgIGFkZFdlYXRoZXJGb3JjYXN0SFRNTChcbiAgICAgICAgZm9yZWNhc3RXZWF0aGVyRWxlLFxuICAgICAgICBkYXksXG4gICAgICAgIHdlYXRoZXJJY29uLFxuICAgICAgICB3ZWF0aGVyRGlzY3JpcHRpb24sXG4gICAgICAgIHRlbXBNYXgsXG4gICAgICAgIHRlbXBNaW5cbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFkZFdlYXRoZXJGb3JjYXN0SFRNTChcbiAgZm9yZWNhc3RXZWF0aGVyRWxlLFxuICBkYXksXG4gIHdlYXRoZXJJY29uLFxuICB3ZWF0aGVyRGlzY3JpcHRpb24sXG4gIHRlbXBNYXgsXG4gIHRlbXBNaW5cbikge1xuICBmb3JlY2FzdFdlYXRoZXJFbGUuaW5uZXJIVE1MICs9IGBcbiAgPGRpdiBjbGFzcz1cImRheVwiPlxuICA8aDM+JHtkYXl9PC9oMz5cbiAgPGltZyBzcmM9XCJodHRwczovL29wZW53ZWF0aGVybWFwLm9yZy9pbWcvd24vJHt3ZWF0aGVySWNvbn1AMngucG5nXCIgLz5cbiAgPGRpdiBjbGFzcz1cImRlc2NyaXB0aW9uXCI+JHt3ZWF0aGVyRGlzY3JpcHRpb259PC9kaXY+XG4gIDxkaXYgY2xhc3M9XCJ0ZW1wXCI+XG4gICAgPHNwYW4gY2xhc3M9XCJoaWdoXCI+JHt0ZW1wTWF4feKEgzwvc3Bhbj4vPHNwYW4gY2xhc3M9XCJsb3dcIj4ke3RlbXBNaW594oSDPC9zcGFuPlxuICA8L2Rpdj5cbiAgPC9kaXY+IFxuICBgO1xufVxuXG5mdW5jdGlvbiBnZXRMb2NhdGlvbigpIHtcbiAgbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmdldEN1cnJlbnRQb3NpdGlvbigocG9zaXRpb24pID0+IHtcbiAgICBnZXRDdXJyZW50V2VhdGhlcihwb3NpdGlvbi5jb29yZHMubGF0aXR1ZGUsIHBvc2l0aW9uLmNvb3Jkcy5sb25naXR1ZGUpO1xuICAgIGdldFdlYXRoZXJGb3JlY2FzdChwb3NpdGlvbi5jb29yZHMubGF0aXR1ZGUsIHBvc2l0aW9uLmNvb3Jkcy5sb25naXR1ZGUpO1xuICB9KTtcbn1cblxuZ2V0TG9jYXRpb24oKTtcblxuY29uc3QgZ2V0V2VhdGhlckZvcmVjYXN0ID0gYXN5bmMgKGxhdGl0dWRlLCBsb25naXR1ZGUpID0+IHtcbiAgY29uc3QgdXJsID0gYGh0dHBzOi8vYXBpLm9wZW53ZWF0aGVybWFwLm9yZy9kYXRhLzIuNS9mb3JlY2FzdD9sYXQ9JHtsYXRpdHVkZX0mbG9uPSR7bG9uZ2l0dWRlfSZ1bml0cz1tZXRyaWMmYXBwaWQ9JHthcGlLZXl9YDtcblxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCk7XG4gIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG5cbiAgcmVuZGVyV2VhdGhlckZvcmVjYXN0SFRNTChkYXRhLmxpc3QpO1xufTtcblxuY29uc3QgZ2V0Q3VycmVudFdlYXRoZXIgPSBhc3luYyAobGF0aXR1ZGUsIGxvbmdpdHVkZSkgPT4ge1xuICBjb25zdCB1cmwgPSBgaHR0cHM6Ly9hcGkub3BlbndlYXRoZXJtYXAub3JnL2RhdGEvMi41L3dlYXRoZXI/bGF0PSR7bGF0aXR1ZGV9Jmxvbj0ke2xvbmdpdHVkZX0mdW5pdHM9bWV0cmljJmFwcGlkPSR7YXBpS2V5fWA7XG5cbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwpO1xuICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuXG4gIHJlbmRlckN1cnJlbnRXZWF0aGVySFRNTChkYXRhKTtcbn07XG4iXX0=
