let cityName="winnipeg",apiKey="8991320cab517f1c599937a2bb062e87";function renderCurrentWeatherHTML(e){const t=document.querySelector(".current-conditions");var a=e.weather[0].icon,i=Math.ceil(e.main.temp),e=e.weather[0].description;t.innerHTML="",t.innerHTML+=`<h2>Current Conditions</h2>
        <img src="http://openweathermap.org/img/wn/${a}@2x.png" />
        <div class="current">
          <div class="temp">${i}℃</div>
          <div class="condition">${e}</div>
        </div> `}function renderWeatherForecastHTML(e){const t=document.querySelector(".forecast");for(i=0;i<=40;i++){var a,r,n,c,s;i%8==0&&(a=new Date(e[i].dt_txt).toLocaleDateString("default",{weekday:"long"}),r=e[i].weather[0].icon,n=Math.ceil(e[i].main.temp_max),c=Math.floor(e[i].main.temp_min),s=e[i].weather[0].description,t.innerHTML+=`
  <div class="day">
  <h3>${a}</h3>
  <img src="http://openweathermap.org/img/wn/${r}@2x.png" />
  <div class="description">${s}</div>
  <div class="temp">
    <span class="high">${n}℃</span>/<span class="low">${c}℃</span>
  </div>
  </div> 
  `)}}const getCurrentWeather=async e=>{e=`http://api.openweathermap.org/data/2.5/weather?q=${e}&units=metric&appid=${apiKey}`;const t=await fetch(e);return await t.json()},getWeatherForecast=async e=>{e=`https://api.openweathermap.org/data/2.5/forecast?q=${e}&units=metric&appid=${apiKey}`;const t=await fetch(e);return t.json()};getCurrentWeather(cityName).then(e=>{renderCurrentWeatherHTML(e)}),getWeatherForecast(cityName).then(e=>{renderWeatherForecastHTML(e.list)});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJjaXR5TmFtZSIsImFwaUtleSIsInJlbmRlckN1cnJlbnRXZWF0aGVySFRNTCIsIndlYXRoZXJPYmoiLCJjdXJyZW50Q29uZGl0aW9uRWxlIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2VhdGhlckljb24iLCJ3ZWF0aGVyIiwiaWNvbiIsInRlbXAiLCJNYXRoIiwiY2VpbCIsIndlYXRoZXJEaXNjcmlwdGlvbiIsImRlc2NyaXB0aW9uIiwiaW5uZXJIVE1MIiwicmVuZGVyV2VhdGhlckZvcmVjYXN0SFRNTCIsIndlYXRoZXJBcnJheSIsImZvcmVjYXN0V2VhdGhlckVsZSIsImkiLCJkYXkiLCJ0ZW1wTWF4IiwidGVtcE1pbiIsIkRhdGUiLCJkdF90eHQiLCJ0b0xvY2FsZURhdGVTdHJpbmciLCJ3ZWVrZGF5IiwidGVtcF9tYXgiLCJmbG9vciIsInRlbXBfbWluIiwiZ2V0Q3VycmVudFdlYXRoZXIiLCJhc3luYyIsInVybCIsInJlc3BvbnNlIiwiZmV0Y2giLCJqc29uIiwiZ2V0V2VhdGhlckZvcmVjYXN0IiwidGhlbiIsImRhdGEiLCJsaXN0Il0sIm1hcHBpbmdzIjoiQUFBQSxJQUFBQSxTQUFBLFdBQ0FDLE9BQUEsbUNBRUEsU0FBQUMseUJBQUFDLEdBQ0EsTUFBQUMsRUFBQUMsU0FBQUMsY0FBQSx1QkFFQSxJQUFBQyxFQUFBSixFQUFBSyxRQUFBLEdBQUFDLEtBQ0FDLEVBQUFDLEtBQUFDLEtBQUFULEVBQUEsS0FBQU8sTUFDQUcsRUFBQVYsRUFBQUssUUFBQSxHQUFBTSxZQUVBVixFQUFBVyxVQUFBLEdBQ0FYLEVBQUFXO3FEQUNBUjs7OEJBRUFHO21DQUNBRztpQkFJQSxTQUFBRywwQkFBQUMsR0FDQSxNQUFBQyxFQUFBYixTQUFBQyxjQUFBLGFBRUEsSUFBQWEsRUFBQSxFQUFBQSxHQUFBLEdBQUFBLElBQUEsQ0FDQSxJQUNBQyxFQUNBYixFQUNBYyxFQUNBQyxFQUNBVCxFQUxBTSxFQUFBLEdBQUEsSUFDQUMsRUFBQSxJQUFBRyxLQUFBTixFQUFBRSxHQUFBSyxRQUFBQyxtQkFBQSxVQUFBLENBQUFDLFFBQUEsU0FDQW5CLEVBQUFVLEVBQUFFLEdBQUFYLFFBQUEsR0FBQUMsS0FDQVksRUFBQVYsS0FBQUMsS0FBQUssRUFBQUUsR0FBQSxLQUFBUSxVQUNBTCxFQUFBWCxLQUFBaUIsTUFBQVgsRUFBQUUsR0FBQSxLQUFBVSxVQUNBaEIsRUFBQUksRUFBQUUsR0FBQVgsUUFBQSxHQUFBTSxZQUNBSSxFQUFBSDs7UUFHQUs7K0NBQ0FiOzZCQUNBTTs7eUJBRUFRLCtCQUFBQzs7O01BUUEsTUFBQVEsa0JBQUFDLE1BQUEvQixJQUNBZ0Msc0RBQUFoQyx3QkFBQUMsU0FDQSxNQUFBZ0MsUUFBQUMsTUFBQUYsR0FHQSxhQUZBQyxFQUFBRSxRQUtBQyxtQkFBQUwsTUFBQS9CLElBQ0FnQyx3REFBQWhDLHdCQUFBQyxTQUVBLE1BQUFnQyxRQUFBQyxNQUFBRixHQUdBLE9BRkFDLEVBQUFFLFFBS0FMLGtCQUFBOUIsVUFBQXFDLEtBQUEsSUFDQW5DLHlCQUFBb0MsS0FHQUYsbUJBQUFwQyxVQUFBcUMsS0FBQSxJQUNBckIsMEJBQUFzQixFQUFBQyIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgY2l0eU5hbWUgPSBcIndpbm5pcGVnXCI7XG5sZXQgYXBpS2V5ID0gXCI4OTkxMzIwY2FiNTE3ZjFjNTk5OTM3YTJiYjA2MmU4N1wiO1xuXG5mdW5jdGlvbiByZW5kZXJDdXJyZW50V2VhdGhlckhUTUwod2VhdGhlck9iaikge1xuICBjb25zdCBjdXJyZW50Q29uZGl0aW9uRWxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jdXJyZW50LWNvbmRpdGlvbnNcIik7XG5cbiAgY29uc3Qgd2VhdGhlckljb24gPSB3ZWF0aGVyT2JqLndlYXRoZXJbMF0uaWNvbjtcbiAgY29uc3QgdGVtcD0gTWF0aC5jZWlsKHdlYXRoZXJPYmpbXCJtYWluXCJdLnRlbXApO1xuICBjb25zdCB3ZWF0aGVyRGlzY3JpcHRpb24gPSB3ZWF0aGVyT2JqLndlYXRoZXJbMF0uZGVzY3JpcHRpb247XG5cbiAgY3VycmVudENvbmRpdGlvbkVsZS5pbm5lckhUTUwgPSBcIlwiO1xuICBjdXJyZW50Q29uZGl0aW9uRWxlLmlubmVySFRNTCArPSBgPGgyPkN1cnJlbnQgQ29uZGl0aW9uczwvaDI+XG4gICAgICAgIDxpbWcgc3JjPVwiaHR0cDovL29wZW53ZWF0aGVybWFwLm9yZy9pbWcvd24vJHt3ZWF0aGVySWNvbn1AMngucG5nXCIgLz5cbiAgICAgICAgPGRpdiBjbGFzcz1cImN1cnJlbnRcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwidGVtcFwiPiR7dGVtcH3ihIM8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29uZGl0aW9uXCI+JHt3ZWF0aGVyRGlzY3JpcHRpb259PC9kaXY+XG4gICAgICAgIDwvZGl2PiBgO1xufVxuXG5mdW5jdGlvbiByZW5kZXJXZWF0aGVyRm9yZWNhc3RIVE1MKHdlYXRoZXJBcnJheSl7XG4gIGNvbnN0IGZvcmVjYXN0V2VhdGhlckVsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mb3JlY2FzdCcpO1xuIFxuICBmb3IoaT0wO2k8PTQwO2krKyl7XG4gICAgaWYoaSU4PT09MCl7XG4gICAgICBjb25zdCBkYXkgPSBuZXcgRGF0ZSh3ZWF0aGVyQXJyYXlbaV0uZHRfdHh0KS50b0xvY2FsZURhdGVTdHJpbmcoJ2RlZmF1bHQnLHt3ZWVrZGF5OiAnbG9uZyd9KTtcbiAgY29uc3Qgd2VhdGhlckljb24gPSB3ZWF0aGVyQXJyYXlbaV0ud2VhdGhlclswXS5pY29uO1xuICBjb25zdCB0ZW1wTWF4ID0gTWF0aC5jZWlsKHdlYXRoZXJBcnJheVtpXVtcIm1haW5cIl0udGVtcF9tYXgpO1xuICBjb25zdCB0ZW1wTWluID0gTWF0aC5mbG9vcih3ZWF0aGVyQXJyYXlbaV1bXCJtYWluXCJdLnRlbXBfbWluKTtcbiAgY29uc3Qgd2VhdGhlckRpc2NyaXB0aW9uID0gd2VhdGhlckFycmF5W2ldLndlYXRoZXJbMF0uZGVzY3JpcHRpb247XG4gIGZvcmVjYXN0V2VhdGhlckVsZS5pbm5lckhUTUwgKz1cbiAgYFxuICA8ZGl2IGNsYXNzPVwiZGF5XCI+XG4gIDxoMz4ke2RheX08L2gzPlxuICA8aW1nIHNyYz1cImh0dHA6Ly9vcGVud2VhdGhlcm1hcC5vcmcvaW1nL3duLyR7d2VhdGhlckljb259QDJ4LnBuZ1wiIC8+XG4gIDxkaXYgY2xhc3M9XCJkZXNjcmlwdGlvblwiPiR7d2VhdGhlckRpc2NyaXB0aW9ufTwvZGl2PlxuICA8ZGl2IGNsYXNzPVwidGVtcFwiPlxuICAgIDxzcGFuIGNsYXNzPVwiaGlnaFwiPiR7dGVtcE1heH3ihIM8L3NwYW4+LzxzcGFuIGNsYXNzPVwibG93XCI+JHt0ZW1wTWlufeKEgzwvc3Bhbj5cbiAgPC9kaXY+XG4gIDwvZGl2PiBcbiAgYDtcblxuICAgIH1cbiAgfVxufVxuY29uc3QgZ2V0Q3VycmVudFdlYXRoZXIgPSBhc3luYyAoY2l0eU5hbWUpID0+IHtcbiAgbGV0IHVybCA9IGBodHRwOi8vYXBpLm9wZW53ZWF0aGVybWFwLm9yZy9kYXRhLzIuNS93ZWF0aGVyP3E9JHtjaXR5TmFtZX0mdW5pdHM9bWV0cmljJmFwcGlkPSR7YXBpS2V5fWA7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsKTtcbiAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcblxuICByZXR1cm4gZGF0YTtcbn07XG5cbmNvbnN0IGdldFdlYXRoZXJGb3JlY2FzdCA9IGFzeW5jIChjaXR5TmFtZSkgPT4ge1xuICBjb25zdCB1cmwgPSBgaHR0cHM6Ly9hcGkub3BlbndlYXRoZXJtYXAub3JnL2RhdGEvMi41L2ZvcmVjYXN0P3E9JHtjaXR5TmFtZX0mdW5pdHM9bWV0cmljJmFwcGlkPSR7YXBpS2V5fWA7XG5cbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwpO1xuICBjb25zdCBkYXRhID0gcmVzcG9uc2UuanNvbigpO1xuXG4gIHJldHVybiBkYXRhO1xufTtcblxuZ2V0Q3VycmVudFdlYXRoZXIoY2l0eU5hbWUpLnRoZW4oKGRhdGEpID0+IHtcbiAgcmVuZGVyQ3VycmVudFdlYXRoZXJIVE1MKGRhdGEpO1xufSk7XG5cbmdldFdlYXRoZXJGb3JlY2FzdChjaXR5TmFtZSkudGhlbigoZGF0YSkgPT4ge1xuICByZW5kZXJXZWF0aGVyRm9yZWNhc3RIVE1MKGRhdGEubGlzdCk7XG59KTtcbiJdfQ==
